plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'jacoco'
    id "com.github.hierynomus.license"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

apply from: "../gradle/docker.gradle"

repositories {
    mavenCentral()

    maven {
        url 'https://repo.spring.io/libs-milestone/'
    }

    maven {
        url 'https://repository.primefaces.org/'
    }
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

springBoot {
    mainClassName = 'be.doji.productivity.trambu.front.TrambuWebApplication'
}

bootJar {
    manifest {
        attributes 'Start-Class': 'be.doji.productivity.trambu.front.TrambuWebApplication'
    }
}

dependencies {
    compile project(':trambu-domain')
    compile project(':trambu-infrastructure')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // User Interface
//    compile group: 'org.joinfaces', name: 'primefaces-spring-boot-starter', version: '4.0.4'
    compile 'org.joinfaces:primefaces-spring-boot-starter:4.1.0-m1'
    compile 'org.springframework.boot:spring-boot-dependencies:2.2.0.M2'
    compile group: 'org.primefaces.themes', name: 'all-themes', version: '1.0.10'

    //Lombok
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'

    //Database
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation group: 'com.h2database', name: 'h2', version: '1.3.148'
    compile group: 'org.hibernate', name: 'hibernate-core', version: '5.4.2.Final'
}

license {
    header rootProject.file('LICENSE_HEADER')
    strictCheck false
    exclude('**/*.txt')
}

build {
    doFirst {
        licenseFormatTest
        licenseFormatMain
    }
}
