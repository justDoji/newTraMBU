
jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco.xml")
        csv.enabled false
        html.destination file("${buildDir}/reports/jacocoHtml")
    }
}

sonarqube {
    properties {
        property "sonar.branch.name", gitBranch()
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "be.doji.productivity:newtrambu"
        property "sonar.language", "java"
        property "sonar.sources", './src/main/java'
        property "sonar.tests", './src/test/java'
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco.xml"
        property "sonar.jacoco.reportPaths", "build/jacoco/test.exec"
        property "sonar.junit.reportPaths", "build/test-results/test"

        if (project.hasProperty('sonarLogin')) {
            property "sonar.login", project.property('sonarLogin')
        }
        property "sonar.organization", 'justdoji-github'

        //Ignore the front-end in the sonar analysis
        property 'sonar.coverage.exclusions', "**be/doji/productivity/trambu/zulma/**, **be/doji/productivity/trambu/zulma/soap/**, **be/doji/productivity/trambu/zulma/messages/**, **be/doji/productivity/trambu/events/timetracking/**, **be/doji/productivity/trambu/events/timetracking/dto/**"
        property 'sonar.exclusions', "**be/doji/productivity/trambu/zulma/**, **be/doji/productivity/trambu/zulma/soap/**, **be/doji/productivity/trambu/zulma/messages/**, **be/doji/productivity/trambu/events/timetracking/**, **be/doji/productivity/trambu/events/timetracking/dto/**"
    }
}

def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

task buildAndAnalyze(type: DefaultTask) {
    dependsOn 'licenseFormatTest'
    dependsOn 'licenseFormatMain'
    dependsOn 'build'
    dependsOn 'sonarqube'

    tasks.findByName('licenseFormatMain').mustRunAfter 'licenseFormatTest'
    tasks.findByName('build').mustRunAfter 'licenseFormatMain'
    tasks.findByName('sonarqube').mustRunAfter 'build'
}

buildAndAnalyze.setGroup("build")